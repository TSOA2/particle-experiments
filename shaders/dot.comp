#version 450

struct Particle {
	vec3 position;
	float mass;
	vec3 velocity;
};

layout (binding = 0, std140) buffer instanceSSBO {
	Particle particles[];
};

layout (local_size_x = 1000, local_size_y = 1, local_size_z = 1) in;
void main()
{
	const uint gidx = (gl_WorkGroupID.x+1) * (gl_WorkGroupID.y+1) * (gl_WorkGroupID.z+1) -1;
	const uint numParticles = gl_NumWorkGroups.x * gl_NumWorkGroups.y * gl_NumWorkGroups.z;
	const uint div = numParticles / 1000;
	uint i = gl_LocalInvocationIndex * div;

	const uint limit = i + div;
	for (; i < limit; i++) {
		if (gidx == i)
			continue;

		const vec3 dVector = particles[i].position - particles[gidx].position;
		const float gConstant = 6.6743e-11;
		float dMagn = dot(dVector, dVector);
		if (dMagn == 0.0)
			dMagn = 0.001;

		const float aScalar = particles[i].mass * gConstant / dMagn;
		particles[gidx].velocity += vec3(dVector * aScalar / sqrt(dMagn));
	}

	vec3 finalVector = particles[gidx].velocity * (1.0);
	particles[gidx].position += finalVector;
}
