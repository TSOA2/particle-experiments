#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct Particle
{
    packed_float3 position;
    float mass;
    float3 velocity;
};

struct instanceSSBO
{
    Particle particles[1];
};

kernel void main0(device instanceSSBO& _40 [[buffer(0)]], uint gl_LocalInvocationIndex [[thread_index_in_threadgroup]])
{
    uint idx = gl_LocalInvocationIndex;
    float3 accelVector = float3(0.0);
    for (uint i = 0u; i < 2u; i++)
    {
        if (idx == i)
        {
            continue;
        }
        float3 dVector = float3(_40.particles[i].position) - float3(_40.particles[idx].position);
        float dMagn = dot(dVector, dVector);
        if (dMagn == 0.0)
        {
            dMagn = 1.0;
        }
        float aScalar = (_40.particles[i].mass * 6.6743000015634379451512359082699e-11) / dMagn;
        accelVector += float3((dVector * aScalar) / float3(sqrt(dMagn)));
    }
    _40.particles[idx].velocity += accelVector;
    float3 finalVector = _40.particles[idx].velocity * 1.0;
    _40.particles[idx].position = float3(_40.particles[idx].position) + finalVector;
}

